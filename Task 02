const express = require('express');
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const { body, validationResult } = require('express-validator');
require('dotenv').config();

const app = express();
app.use(express.json());

// ======== ENV VARIABLES =========
const PORT = process.env.PORT || 5000;
const MONGO_URI = process.env.MONGO_URI || 'mongodb://localhost:27017/employeeDB';
const JWT_SECRET = process.env.JWT_SECRET || 'your_secret_key';

// ======== MONGOOSE MODELS =========
const userSchema = new mongoose.Schema({
  username: { type: String, unique: true },
  password: String,
  role: { type: String, enum: ['admin', 'user'], default: 'user' }
});
const User = mongoose.model('User', userSchema);

const employeeSchema = new mongoose.Schema({
  name: String,
  position: String,
  department: String,
  salary: Number
});
const Employee = mongoose.model('Employee', employeeSchema);

// ======== MIDDLEWARE =========
const auth = (req, res, next) => {
  const token = req.header('Authorization')?.split(' ')[1];
  if (!token) return res.status(401).json({ message: 'Access denied' });

  try {
    const verified = jwt.verify(token, JWT_SECRET);
    req.user = verified;
    next();
  } catch {
    res.status(400).json({ message: 'Invalid token' });
  }
};

const adminOnly = (req, res, next) => {
  if (req.user.role !== 'admin')
    return res.status(403).json({ message: 'Admins only' });
  next();
};

// ======== ROUTES =========

// Register Admin/User
app.post('/register', [
  body('username').isString().notEmpty(),
  body('password').isLength({ min: 5 }),
  body('role').optional().isIn(['admin', 'user'])
], async (req, res) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) return res.status(400).json({ errors: errors.array() });

  const { username, password, role } = req.body;
  const userExists = await User.findOne({ username });
  if (userExists) return res.status(400).json({ message: 'User already exists' });

  const hashed = await bcrypt.hash(password, 10);
  const newUser = new User({ username, password: hashed, role });
  await newUser.save();

  res.status(201).json({ message: 'User registered' });
});

// Login
app.post('/login', [
  body('username').notEmpty(),
  body('password').notEmpty()
], async (req, res) => {
  const { username, password } = req.body;

  const user = await User.findOne({ username });
  if (!user) return res.status(400).json({ message: 'Invalid credentials' });

  const isMatch = await bcrypt.compare(password, user.password);
  if (!isMatch) return res.status(400).json({ message: 'Invalid credentials' });

  const token = jwt.sign({ _id: user._id, role: user.role }, JWT_SECRET, { expiresIn: '1h' });
  res.json({ token });
});

// CRUD: Create Employee
app.post('/employees', auth, adminOnly, [
  body('name').notEmpty(),
  body('position').notEmpty(),
  body('department').notEmpty(),
  body('salary').isNumeric()
], async (req, res) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) return res.status(400).json({ errors: errors.array() });

  const employee = new Employee(req.body);
  await employee.save();
  res.status(201).json(employee);
});

// Read All Employees
app.get('/employees', auth, async (req, res) => {
  const employees = await Employee.find();
  res.json(employees);
});

// Read Single Employee
app.get('/employees/:id', auth, async (req, res) => {
  const emp = await Employee.findById(req.params.id);
  if (!emp) return res.status(404).json({ message: 'Not found' });
  res.json(emp);
});

// Update Employee
app.put('/employees/:id', auth, adminOnly, [
  body('salary').optional().isNumeric()
], async (req, res) => {
  const updated = await Employee.findByIdAndUpdate(req.params.id, req.body, { new: true });
  if (!updated) return res.status(404).json({ message: 'Employee not found' });
  res.json(updated);
});

// Delete Employee
app.delete('/employees/:id', auth, adminOnly, async (req, res) => {
  const deleted = await Employee.findByIdAndDelete(req.params.id);
  if (!deleted) return res.status(404).json({ message: 'Employee not found' });
  res.json({ message: 'Employee deleted' });
});

// ======== CONNECT & RUN =========
mongoose.connect(MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
}).then(() => {
  app.listen(PORT, () => console.log(`üöÄ Server running on http://localhost:${PORT}`));
}).catch(err => {
  console.error('‚ùå MongoDB connection error:', err);
});
